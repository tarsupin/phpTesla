<?php /*

-------------------------------------
------ About the Skydata Class ------
-------------------------------------

See example in '/app/starborn'

-----------------------------------------------
------ Example of how to use this plugin ------
-----------------------------------------------



-------------------------------
------ Methods Available ------
-------------------------------

Skydata::prepare($url, $guestData = true);		// Prepare the Skydata Database & Configs

Skydata::getTable($tableName);					// Loads the table into Skydata::$table[$tableName]

Skydata::$tableList						// Cache of Full List of Tables
Skydata::$viewList						// Cache of Full List of Views
Skydata::$markupList					// Cache of Full List of Markup

Skydata::$structure[$tableName]			// Cache of Table Structures
Skydata::$data[$tableName]				// Cache of Table Data

*/

abstract class Skydata {
	
	
/****** Class Variables ******/
	public static $database = "";
	public static $path = "";
	public static $useGuestData = false;
	public static $tableName = "";
	
	
/****** Prepare Skydata ******/
	public static function prepare
	(
		$url					// <array> The $url value generated by phpTesla.
	,	$useGuestData = false	// <bool> Set to TRUE to use guest data.
	)							// RETURNS <void>
	
	// Skydata::prepare($url);
	{
		if(empty($url[0]) or $url[0] != "skydata" or empty($url[1])) {
			throw new Exception("Using a Skydatabase must be attempted using /skydata/SKYDATABASE.");
		}
		
		// Make sure the desired Skydatabase exists
		if(!file_exists(APP_PATH . "/skydata/" . $url[1])) {
			throw new Exception('The "' . $url[1] . '" Skydatabase does not exist.');
		}
		
		// Skydata Configuration
		self::$database = $url[1];
		self::$path = APP_PATH . "/skydata/" . self::$database;
		
		if($useGuestData) {
			self::$useGuestData = true;
		}
		
		// Get the view, if applicable
		if(empty($url[2])) {
			return;
		}
		
		switch($url[2]) {
			
			case "views":
				
				// Skydata View Configuration
				self::$viewName = implode("/", array_slice($url, 3));
				
				if(!file_exists(self::$path . "/views/" . self::$viewName . ".json")) {
					throw new Exception('The view for "' . self::$viewName . '" in the "' . self::$database . '" Skydatabase does not exist.');
				}
				
				break;
			
			case "data":
			case "editor":
			case "markup":
				
				// Skydata View Configuration
				self::$tableName = $url[3];
				
				if(!file_exists(self::$path . "/" . $url[2] . "/" . self::$tableName . ".json")) {
					throw new Exception('The ' . $url[2] . ' for "' . self::$tableName . '" in the "' . self::$database . '" Skydatabase does not exist.');
				}
				
				break;
		}
	}
	
	
/****** Get lists from the database ******/
	public static function getDataList () { return self::getList('data'); }
	public static function getTableList () { return self::getList('tables'); }
	public static function getViewList () { return self::getList('views'); }
	public static function getMarkupList () { return self::getList('markup'); }
	
	
/****** Get data from the database ******/
	public static function getData ( $tableName ) { return self::getSkydata( $tableName, 'data' ); }
	public static function getTable ( $tableName ) { return self::getSkydata( $tableName, 'tables' ); }
	
	
/****** Retrieve list from a Skydata database ******/
	private static function getList
	(
		$listType		// <str> Set the type of list to retrieve from the database.
	)					// RETURNS <array> Returns the designated list.
	
	// $listData = self::getList('tables');
	{
		$list = array();
		$path = self::$path . "/" . $listType;
		$files = File_Scan::scanRecursive($path, "*.json");
		
		foreach($files as $file) {
			$file = str_replace($path . "/", "", $file);
			$file = str_replace(".json", "", $file);
			$list[] = $file;
		}
		
		return $list;
	}
	
	
/****** Retrieve list from a Skydata database ******/
	public static function getSkydata
	(
		$tableName		// <str> The name of the table being retrieved.
	,	$listType		// <str> Set the type of list to retrieve from the database.
	)					// RETURNS <array> Returns the skydata.
	
	// $peopleData = Skydata::getSkydata('People', 'tables');
	{
		$list = array();
		$path = self::$path . "/" . $listType;
		
		if(!$data = File::read( self::$path . "/" . $listType . "/" . $tableName . ".json" )) {
			return array();
		}
		
		return json_decode( $data, true );
	}
	
	
/****** Retrieve a "select list" query from a Skydata database ******/
	public static function selectList
	(
		$table		// <str> The name of a Skydata table.
	,	$column		// <str> The column to select from.
	)				// RETURNS <array> Return a list of column data.
	
	// Skydata::selectList( $table, $column );
	{
		if(!$data = File::read( self::$path . "/tables/" . $table . ".json" )) {
			return array("data" => array());
		}
		
		$data = json_decode( $data, true );
		
		if( json_last_error() ) {
			throw new Exception( json_last_error_msg() );
		}
		
		$prepareList = array();
		
		// If the column is "id" we use the key
		if($column == "id") {
			foreach( $data['data'] as $key => $row ) {
				$prepareList[$key] = $key;
			}
		}
		else {
			foreach( $data['data'] as $row ) {
				if(!empty($row['properties'][$column])) {
					$prepareList[$row['properties'][$column]] = $row['properties'][$column];
				}
			}
			
			$prepareList = array_unique($prepareList);
		}
		
		ksort($prepareList);
		
		return $prepareList;
	}
	
	
/****** Retrieve data from a Skydata view ******/
	public static function getViewData
	(
		$viewName					// <str> The name of a Skydata view to retrieve data from.
	)								// RETURNS <array> The view data.
	
	// Skydata::getViewData($viewName);	// Retrieve data from a desired Skydata view.
	{
		$viewData = json_decode( File::read( self::$path . "/views/" . $viewName . ".json" ), true );
		
		if( json_last_error() ) {
			throw new Exception( json_last_error_msg() );
		}
		
		// Important Variables
		$rowsToAdd = array();
		
		// Create the anonymous functions for the rules
		$ruleFuncs = array();
		
		if(!empty($viewData['rules'])) {
			
			foreach($viewData['rules'] as $rule) {
				
				// If we're dealing with a standard rule, there is a 'property' property and no 'type'
				if(!empty($rule['property'])) {
					
					$prop = $rule['property'];
					$comparedValue = $rule['value'];
					
					switch($rule['comparison']) {
						
						case ">=":
							$ruleFuncs[] = function( $rowProps ) use ( $prop, $comparedValue ) {
								if(empty($rowProps[$prop])) { return false; }		// The property must exist.
								return $rowProps[$prop] >= $comparedValue;
							};
							break;
						
						case "<=":
							$ruleFuncs[] = function( $rowProps ) use ( $prop, $comparedValue ) {
								if(empty($rowProps[$prop])) { return false; }		// The property must exist.
								return $rowProps[$prop] <= $comparedValue;
							};
							break;
						
						case "!=":
							$ruleFuncs[] = function( $rowProps ) use ( $prop, $comparedValue ) {
								if(empty($rowProps[$prop])) { return false; }		// The property must exist.
								return $rowProps[$prop] != $comparedValue;
							};
							break;
						
						case "in":
							$ruleFuncs[] = function( $rowProps ) use ( $prop, $comparedValue ) {
								if(empty($rowProps[$prop])) { return false; }		// The property must exist.
								return in_array($rowProps[$prop], $comparedValue);
							};
							break;
						
						case "not in":
							$ruleFuncs[] = function( $rowProps ) use ( $prop, $comparedValue ) {
								if(empty($rowProps[$prop])) { return false; }		// The property must exist.
								return !in_array($rowProps[$prop], $comparedValue);
							};
							break;
							
						// Create a function that looks for an equal match.
						case "=":
						default:
							
							$ruleFuncs[] = function( $rowProps ) use ( $prop, $comparedValue ) {
								
								// The property must exist
								if(empty($rowProps[$prop])) {
									return false;
								}
								
								return $rowProps[$prop] === $comparedValue;
							};
							break;
					}
				}
				
				// If we're dealing with a "matchOne" rule, we need to make sure at least one of the options is true.
			}
		}
		
		// Loop through each table
		foreach($viewData['tables'] as $tableName)
		{
			$data = self::getData( $tableName );
			
			// Make sure the table exists
			if(empty($data['structure'])) {
				continue;
			}
			
			// Loop through all data rows
			foreach($data['data'] as $rowID => $rowData) {
				
				// We cannot have certain tags. If those tags are found, skip this row.
				if(!empty($viewData['restrictedTags'])) {
					
					foreach($rowData['tags'] as $tagName) {
						
						if(in_array($tagName, $viewData['restrictedTags'])) {
							continue 2;
						}
					}
				}
			
				// Certain tags are required. If we don't have them, skip this row.
				if(!empty($viewData['requiredTags'])) {
					
					foreach($viewData['requiredTags'] as $requiredTag) {
						
						if(!in_array($requiredTag, $rowData['tags'])) {
							continue 2;
						}
					}
				}
				
				// Loop through all rules to ensure they all succeed.
				foreach($ruleFuncs as $ruleFunc) {
					
					if(!$ruleFunc( $rowData['properties'] )) {
						continue 2;
					}
				}
				
				$rowsToAdd[$rowID] = $rowData;
			}
		}
		
		// Return the created table
		$viewData['data'] = $rowsToAdd;
		unset($viewData['structure']['headers']['id']);
		
		return $viewData;
	}
	
	
/****** Add an entry to a table ******/
	public static function addTableEntry
	(
		$tableName				// <str> The name of a Skydata table to update data on.
	,	$submittedID			// <str> The ID of the data to submit.
	,	$submittedData			// <array> The submitted data to enter.
	,	$guestEntry = false		// <bool> TRUE if you want to pull the guest data for it.
	)							// RETURNS <bool> TRUE on success, FALSE on failure.
	
	// Skydata::addTableEntry($tableName, $submittedID, $submittedData, $guestEntry);
	{
		// Get the existing table data, as is:
		if(!$data = File::read( self::$path . "/tables/" . $tableName . ".json" )) {
			return false;
		}
		
		$data = json_decode( $data, true );
		
		if( json_last_error() ) {
			throw new Exception( json_last_error_msg() );
		}
		
		// For standard entries, update or insert the new entry
		if(!$guestEntry) {
			$data['data'][$submittedID] = $submittedData;
		}
		
		// If this is a guest entry, update the entry as unapprovedData
		else {
			$data['unapprovedData'][$submittedID] = $submittedData;
		}
		
		// Update the file with the appropriate JSON
		$newJSON = json_encode($data, JSON_PRETTY_PRINT);
		
		File::write(self::$path . "/tables/" . $tableName . ".json", $newJSON);
		
		return true;
	}
	
	
/****** Convert "reference text" to a reference object ******/
	public static function convertReferenceTextToReferenceObject
	(
		$referenceText		// <str> A reference text, possibly multi-line, to convert.
	)						// RETURNS <array> the resulting reference object.
	
	// $referenceObject = Skydata::convertReferenceTextToReferenceObject($referenceText);
	{
		/*
			// Cities.Born In="Ankh"
			// Cities.Lived In=["Ankh", "Catalyst", "Skywood"]
			
			{
				"Cities": {
					"Born In": "Ankh",
					"Lived In": [
						"Ankh",
						"Catalyst",
						"Skywood"
					]
				}
			}
		*/
		
		// Make sure there is actually text to convert
		if(empty($referenceText)) { return array(); }
		
		$referenceObject = array();
		
		// Loop through every line individually in the reference text
		$referenceMultiLine = explode(PHP_EOL, $referenceText);
		
		foreach( $referenceMultiLine as $referenceString ) {
			
			// Found a reference. Must match the expected formatting of: Table.Reference Name="ID of Thing"
			// If not, skip that line:
			if(strpos($referenceString, ".") === false or strpos($referenceString, "=") === false) {
				continue;
			}
			
			list($refPrep, $refJSON) = explode("=", $referenceString, 2);
			list($refTable, $refName) = explode(".", $refPrep, 2);
			
			// Make sure the reference table is loaded.
			if(in_array($refTable, self::$tableList)) {
				
				if(empty(self::$table[$refTable])) {
					self::$table[$refTable] = self::getTable( $getTable );
				}
			}
			
			// Make sure the string has valid JSON or skip it
			if(!json_decode($refJSON, true)) {
				continue;
			}
			
			// If the value is a string, wrap it in an array:
			$isMany = true;
			
			if(!is_array($refJSON)) {
				$isMany = false;
				$refJSON = array($refJSON);
			}
			
			// If the value is an array:
			// Loop over each value to ensure it exists.
			// If a value doesn't exist, we skip it.
			foreach( $refJSON as $refID ) {
				
				$refID = trim($refID);
				
				// Check if this value has a constraint, and must match a legitimate value:
				if(!empty(self::$table[$refTable]['structure']['references'][$refTable][$refName])) {
					
					$check = self::$table[$refTable]['structure']['references'][$refTable][$refName];
					$constrained = (!empty($check['constrained']) ? (bool) $check['constrained'] : false );
					
					// The value is constrained, therefore it must match or be bypassed:
					if($constrained) {
						if(empty(self::$table[$refTable]['data'][$refID])) {
							continue;
						}
					}
				}
				
				// Reference is successful. Add it to the reference object.
				if(empty($referenceObject[$refTable])) {
					$referenceObject[$refTable] = array();
				}
				
				if($isMany) {
					if(empty($referenceObject[$refTable][$refName])) {
						$referenceObject[$refTable][$refName] = array();
					}
					
					$referenceObject[$refTable][$refName][] = $refID;
				}
				
				else {
					$referenceObject[$refTable][$refName] = $refID;
				}
			}
		}
		
		return $referenceObject;
	}
	
	
/****** Convert "reference object" to a reference text ******/
	public static function convertReferenceObjectToReferenceText
	(
		$referenceObject	// <array> A reference object to convert.
	)						// RETURNS <str> the resulting reference text.
	
	// $referenceText = Skydata::convertReferenceObjectToReferenceText($referenceObject);
	{
		/*
			{
				"Cities": {
					"Born In": "Ankh",
					"Lived In": [
						"Ankh",
						"Catalyst",
						"Skywood"
					]
				}
			}
			
			// Cities.Born In="Ankh"
			// Cities.Lived In=["Ankh", "Catalyst", "Skywood"]
		*/
		
		// Make sure there is actually text to convert
		if(empty($referenceObject)) { return array(); }
		
		$referenceMultiLine = array();
		
		// Loop through each table in the reference object:
		foreach( $referenceObject as $refTable => $refPrep ) {
			
			// Loop through each reference name
			foreach( $refPrep as $refName => $refJSON ) {
				
				$referenceMultiLine[] = $refTable . "." . $refName . "=" . json_encode($refJSON);
			}
		}
		
		return implode(PHP_EOL, $referenceMultiLine);
	}
}
